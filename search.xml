<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>比赛记录</title>
      <link href="2021/03/11/hua-wei-xin-sheng-bei/"/>
      <url>2021/03/11/hua-wei-xin-sheng-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="ctf入门"><a href="#ctf入门" class="headerlink" title="ctf入门"></a>ctf入门</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="xff和referer伪造"><a href="#xff和referer伪造" class="headerlink" title="xff和referer伪造"></a>xff和referer伪造</h3><p>直接在Proxy的Intercept is on里面改写</p><p>X-Forwarded-For:</p><p>Referer:</p><h3 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h3><p>直接在网址后加上robots.txt</p><p>同样的对应的.php也可以直接加上后尝试打开</p><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><p>php的备份文件一般格式有两种：</p><p>1:index.php~</p><p>2:index.php.bak</p><p>对于php代码首先需要了解内容与判断条件，理解之后可以直接在网址中输入</p><p>对于一句话病毒：</p><p>可以使用中国蚁剑进行输入</p><p>也可以使用hackbar，使用post方式传递shell=system(‘cat flag.txt’); 获得flag</p><h3 id="前端摁键等"><a href="#前端摁键等" class="headerlink" title="前端摁键等"></a>前端摁键等</h3><p>可以通过直接修改源代码中的内容使其可见或者可以运行</p><h3 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h3><p>选择需要撞库的对象，加入字典进行撞库</p><h3 id="网页数据提交"><a href="#网页数据提交" class="headerlink" title="网页数据提交"></a>网页数据提交</h3><p>对于提交数据可以在post端先输入x=system(“ls”);查看当前目录下的文件，然后x=system(“pwd”);查看目录,再用s=system(“find / -name flag”);寻找flag，然后用s=system(“cat /flag”);打开（此处flag在上一级需注意使用/）</p><p>对于waf注入：</p><p>可以使用命令127.0.0.1进行试探</p><p>对于获得flag可以使用</p><p>构造127.0.0.1| find / -name “flag*”，若有相关内容会提示如：“/home/flag.txt”</p><p>再进行注入构造127.0.0.1|cat /home/flag.txt</p><p>对于get类数据可以直接在网址后加上/?后输入内容</p><p>对于post类数据可以使用hackbar进行输入</p><p><img src="png/31.png"></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><p>对于wireshark内的流量包可以使用ctrl+f对关键字进行字符串搜索</p><p>对于wireshark中的隐写可以直接尝试使用foremost进行分离</p><p>命令：openssl rsautl -decrypt -in key.txt -inkey psa.key -out flag.txt<br>-in 为要解密的加密文档 -inkey 为密钥 -out 为输出文档（注意需要保留所有内容作为解密key）</p><p>对于解压缩后无flag但有.git的文件可以先尝试binwalk查看文件类型若为bzip2则将其重命名，解压，进入子文件夹，查看查看git，首先使用git log查看git记录，然后使用git stash list查看修改列表，再使用git stash show校验列表中存储的文件，使用git stash apply重新进行存储，复原上面的文件</p><p><img src="../docs/png/55.png"></p><p>寻找key.txt发现有多个txt文件于是使用grep -r key.txt寻找文件</p><p><img src="../docs/png/56.png"></p><p>对于core类可以使用linux下 strings 打开查看内容</p><p>若010editor后发现有pk等字样可以改格式为rar或者zip进行打开</p><p>对于32位或16位中英混合可尝试base64解码</p><p>有13字样的可能使用rot-13工具</p><p>对于pdf可将内容全部选取后用txt打开如：ctrl+a;ctrl+c使用txt打开</p><p>对于rar等可以使用binwalk先查看里面是否含有多个内容，再使用010editor查看内容</p><p>rar对png的文件类型编码是74，详细文章：</p><p><a href="https://wenku.baidu.com/view/3caf8f11866fb84ae45c8de5.html">https://wenku.baidu.com/view/3caf8f11866fb84ae45c8de5.html</a></p><p>对于光盘文件可以直接解压查找内容</p><p>对于pcapng文件可以先用wireshark打开，输入表达式http contains flag查看http协议的报文是否包含flag的信息，追踪筛选出的报文追踪tcp流（以查找可能拥有的信息，比如16进制代码等可以使用图片形式打开）</p><p>可以使用010editor打开但需要</p><p><img src="../docs/png/32.png"></p><p>然后使用ubuntu  打开命令行  输入foremost -i 拖入文件</p><p>可能得出隐藏的文件（在此之前可以直接用binwalk查看是否有隐藏数据）</p><p>遇到全是+-&lt;&gt;的可能是brainfuck加密</p><p>03F30D0A是pyc文件</p><h2 id="密码（crypto）"><a href="#密码（crypto）" class="headerlink" title="密码（crypto）"></a>密码（crypto）</h2><p>看到结尾有等号先丢base64（需要与DES区分）,若全文有多个等号丢base32</p><p>多组AB组合可能为培根密码</p><p>对应的幂数加密如果无法对2进行幂数加密可以尝试1</p><p>轮转机加密对应的密文可以这样理解第一行实际对应的是第（第一个密钥）行，第二行对应的是（第二个密钥）行</p><p>对pem文件可用如下方式打开</p><p><img src="../docs/png/40.png"></p><p>可以直接尝试使用命令打开否则，则可能需要将q,p,n,e写为pem文件并用此文件打开进行解密</p><p><img src="../docs/png/41.png"></p><p>也可以用下面的命令将q,p,e输出为pem文件</p><p><img src="../docs/png/42.png"></p><p><img src="../docs/png/43.png"></p><p>对于ecc题目可以直接用ecctool进行解决对应输入后使用calc r解出k(x,y)公钥</p><h1 id="ctf比赛题目"><a href="#ctf比赛题目" class="headerlink" title="ctf比赛题目"></a>ctf比赛题目</h1><h2 id="2020暨大新生杯"><a href="#2020暨大新生杯" class="headerlink" title="2020暨大新生杯"></a>2020暨大新生杯</h2><h3 id="密码类："><a href="#密码类：" class="headerlink" title="密码类："></a>密码类：</h3><p>碰碰车：</p><p>对应三个未知变量直接用python3，对应的ascii（128）进行遍历，给出代码：</p><p>‘’’</p><p>已知线索：md5(AGVSCF?TZV?WBGVHC?U)=a8f738??????5ea5??????80865???af</p><p>‘’’</p><p>import hashlib</p><p>a=’AGVSCF’</p><p>b=’TZV’</p><p>c=’WBGVHC’</p><p>d=’U’</p><p>for i in range(32,128):</p><pre><code>    for u in range(32,128):            for k in range(32,128):                    c='AGVSCF'+chr(i)+'TZV'+chr(u)+'WBGVHC'+chr(k)+'U'                    a = hashlib.md5()                    a.update(c.encode(encoding='utf-8'))                    if a.hexdigest()[:6]=='a8f738':                                                print('AGVSCF'+chr(i)+'TZV'+chr(u)+'WBGVHC'+chr(k)+'U')</code></pre><p>求出：ctf{AGVSCF9TZV9WBGVHC2U}</p><p>Easy rsa:</p><p><img src="../docs/png/ctf1.png"></p><p>使用z3约束求解器输入条件约束求得p,q,利用p,q,d,n带入rsa求解工具得到</p><p><img src="../docs/png/ctf2.png"></p><p>ctf{Rsa_1s_So_Easy!!!}</p><h3 id="web类："><a href="#web类：" class="headerlink" title="web类："></a>web类：</h3><p>假的签到：</p><p>根据robots协议直接在网页后面加上/robots.txt,然后打开/phpp_tql.php，发现还需要继续输入，百度绕过机制用[]使其结果一致但二者不同，最后获得flag</p><p><img src="../docs/png/ctf3.png"></p><p>ctf{r0bots_1s_g00d}</p><p>世界上最简单的后门:</p><p>打开后发现是输入指令获得flag，先使用c=system(“ls”);发现无flag,然后使用c=system(“pwd”);查看目录发现有上级目录，继续使用c=system(“ls /”);查看上一级目录，发现flag，用c=system(“cat /flag”);打开获得flag</p><p>ctf{gOoo0od}</p><p><img src="../docs/png/ctf4.png"></p><p>Let’s play a simple game again：</p><p>开始时按照题目正常做用get在网页提交然后用post提交数据发现会提示我不是admin，</p><p><img src="../docs/png/ctf5.png"></p><p>使用burpsuite抓包，提交过程，发现</p><p><img src="../docs/png/ctf6.png"></p><p>Base64解码之后发现此为admin=0,自己输入base(admin=1)后尝试，不行，修改为本地上传，加上X-Forwarded-For:127.0.0.1后得出结果</p><p><img src="../docs/png/ctf7.png"></p><p>ctf{Have_4_n1ce_c0mpetition!}</p><p>babysql ：</p><p>查看后为提交内容获得其中的flag，随便提交了一下发现没什么东西，源码也没什么提示，尝试多种sql方法后未能成功，然后猜测为堆叠注入，</p><p>先输入</p><p>1’;show databases;#查看数据库发现有ctf,尝试直接打开</p><p>1’;show tables from ctf;#发现有flag，继续打开</p><p>1’;show columns from flag;得到解</p><p><img src="../docs/png/ctf8.png"></p><p>答案为ctf{enjoy_Sq1i11_qu3ryy}</p><p>babyssrf :</p><p>莫得思路随便尝试一下先打<a href="http://42.194.147.119:18776/?url=file:/">http://42.194.147.119:18776/?url=file:/</a></p><p>发现有回显，尝试寻找flag，获得答案</p><p><img src="../docs/png/ctf9.png"></p><p>ctf{ssrf_1s_soooo_fun}</p><h3 id="MISC-1"><a href="#MISC-1" class="headerlink" title="MISC:"></a>MISC:</h3><p>真签到：</p><p>按照题目要求所做即可，</p><p><img src="../docs/png/ctf10.png"></p><p>ctf{Sign_1n_4nd_Enjoy_Yourself!}</p><p>Look_at_your_keyboard：</p><p><img src="../docs/png/ctf11.png"></p><p>一开始以为时ctfisfvn,后改为ctfisfun后正确ctf{ctfisfun}</p><p>Buddha:</p><p><img src="../docs/png/ctf12.png"></p><p>按所给信息去新与佛论禅处获得解密信息，Y3tXX3p9dFhuYlJmMlJEUw==</p><p>Base64解密，得到c{W_z}tXnbRf2RDS</p><p>排列组合一下得到（当然也可以直接栅栏解密）：ctf{X2WnR_bDzRS}</p><p>Do you know Xp0int：</p><p>打开图片没发现什么东西先看一下01editor,查找flag和ctf发现如下图，</p><p>获得题解：</p><p>ctf{We1c0me_to_Join_Us}</p><p><img src="../docs/png/ctf13.png"></p><p>close_base：</p><p>一开始逐个base64解码，获得后接触为helloworld,密码错误，后百度到此为base64隐写，找到代码后运行获得答案</p><p>ctf{magic_bs64a!}</p><p><img src="../docs/png/ctf14.png"></p><p>EasyMisc:</p><p>将获得的zip解压发现一个png和一个女孩的照片，女孩照片可以获得一个加密的压缩包，不过打不开，另一张png与攻防世界中一道题类似，故尝试直接用盲水印破解，获得图片(非正常解法)</p><p><img src="../docs/png/ctf15.png"></p><p>最后答案为ctf{LSGG_TXDY_ddddhm}（此处的TX可能为TK或TY，不记得了）</p><p>集齐五龙珠：</p><p>由于先做了星际传输协议，故此题看出为zip合成，先根据时间排序，后将文件用以命名，用python输出格式文件名，用linux，cat 1 2 3 … &gt; test.zip解压获得test，</p><p>用记事本打开，在最后发现</p><p><img src="../docs/png/ctf16.png"></p><p>PMGBA:</p><p>首先根据图腾解密为：remember to examine the</p><p>然后用01editor打开花的图片在末尾发现：</p><p>UEsDBBQAAQAIAFW2UFGlNtLRTgAAAHoBAAAKAAAAaGlkZGVuLnR4dHw7+ww4UU8eP4ct4CPy5lPPlBCYCDTL1tJk38pTyrB/Fe91nAUVsB0p+rvB9k2gmvZhkUxC2FYE003K9I54oi1czZcc9A47iO+5MnwlBLAQI/ABQAAQAIAFW2UFGlNtLRTgAAAHoBAAAKACQAAAAAAAAAIAgAAAAAAABoaWRkZW4udHh0CgAgAAAAAAABABgA3IHzt8uj1gHcgfO3y6PWAYBHYaTLo9YBUEsFBgAAAAABAAEAXAAAAHYAAAAAAA==</p><p>Base64解密然后获得一串神奇字符，在输入回01editor发现是压缩包，打开发现时hidden.txt，不过需要密码，用strings等检查花，用zsteg发现password</p><p><img src="../docs/png/ctf17.png"></p><p>获得hidden.txt之后发现是pikalanguage，解密发现是foo bar,与一开始的remember to examine the排列组合，最后结果为（印象中是）：</p><p>ctf{remember to examine the foo bar}</p><p>快乐修补匠:</p><p>按照提示使用流密码解密（部分代码截图）</p><p><img src="../docs/png/ctf18.png"></p><p><img src="../docs/png/ctf19.png"></p><p>把对应的16进制写回获得答案</p><p><img src="../docs/png/ctf20.png"></p><p>ctf{y0u_mus7_kn0w_png_f0rmAt_well}</p><h3 id="逆向："><a href="#逆向：" class="headerlink" title="逆向："></a>逆向：</h3><p>抓迷藏：</p><p>下载zip解压并用IDA打开，在Hex-view中发现flag,</p><p>解为ctf{we1c0me_70_R3_wor!d}<br>(此处是真不知道这个要不要H，需要多次测试一下)</p><p><img src="../docs/png/ctf21.png"></p><p>Bytecode:</p><p>用IDA打开，没看出什么东西，用TXT打开，发现伪代码，重新理解得知为对flag(n)逐个进行的计算操作，逐个逆回去，得出结果</p><p>ctf{zygg_yyds_ddddhm}</p><p>Basic_hash:</p><p>放入IDA后看</p><p><img src="../docs/png/ctf22.png"></p><p>发现为16的数组内逐个异或后与md5加密相同，因此再次异或获得原文再查询MD5</p><p><img src="../docs/png/ctf23.png"></p><p>ctf{zyggyyds}</p><h3 id="社会工程学题目："><a href="#社会工程学题目：" class="headerlink" title="社会工程学题目："></a>社会工程学题目：</h3><p>题目1（checkin ）：</p><p>首先是寻找邮箱在2019的群内获得：为xp0intjnu</p><p><img src="../docs/png/ctf24.png"></p><p>然后是两个大赛一个是强网杯一个是世安杯，最后得出为世安杯(shianbei)</p><p>最后是创始人ID，在微信的成员博客处获得</p><p>故合并为ctf{xp0intjnushianbeigiantbranch}</p><p><img src="../docs/png/ctf25.png"></p><p>Find the attacker:</p><p>先进入博客<a href="http://blog.leanote.com/single/xp0int/About-Me">http://blog.leanote.com/single/xp0int/About-Me</a></p><p>和<a href="http://blog.leanote.com/single/xp0int/Secret-places">http://blog.leanote.com/single/xp0int/Secret-places</a></p><p><img src="../docs/png/ctf26.png"></p><p>在about me处发现：Hello, I am (^_^).I love Baidu services!</p><p>在secret-places处发现一串代码：For the glory of mankind: 1yEt5juom35MATrGy_UWq9w</p><p>百度服务结合代码猜测为百度网盘，</p><p>打开后根据弱代码提示故猜测为1234等，最后由1234通过，下载文件docx</p><p>打开后未发现有用信息，用01editor打开发现pk猜测为zip，解压重复寻找后未发现有用信息</p><p>再次返回docx，百度文章隐写，尝试清除格式获得</p><p><img src="../docs/png/ctf27.png"></p><p>用各种搭配签名访问github（根据提示），寻找到该用户，查找有用信息，在历史记录中发现一个网址</p><p><img src="../docs/png/ctf28.png"></p><p>访问，去除地址末尾，然后进入</p><p><img src="../docs/png/ctf29.png"></p><p>访问txt,发现为多对数字，猜测为经纬度，python编码得出结果：</p><p><img src="../docs/png/ctf30.png"></p><p>ctf{AIDTMLS}为答案</p><h3 id="区块链："><a href="#区块链：" class="headerlink" title="区块链："></a>区块链：</h3><p>将获得的哈希值先在ipfs中查询未获得对应文件，故猜测为测试链，在测试链中找到对应的文件，并获得flag</p><p><img src="../docs/png/ctf31.png"></p><p>ctf{ZSJJ_YYDS!!!!}</p><p>题目2：（星际传输系统）</p><p>按题目所说在ipfs上逐个下回，用cat重新拼接，</p><p><img src="../docs/png/ctf32.png"></p><p>对于sha256sum在前面加上1220用base58获得对应hash</p><p>base58.b58encode_int(int(“1220fea059fa9594cfdf68797eab451c6d9c4673a4252a945d117ee34d5ad3a9b154”, 16))</p><p>输入ipfs获得图片二</p><p><img src="../docs/png/ctf33.png"></p><p>但是多次输入md5{hash2+hash1}未能成功，推测为hash1错误，于是重新分片上传（70kb对应71680字节）</p><p>获得的hash1再次用md5(hash2+hash1)得到结果为</p><p><img src="../docs/png/ctf34.png"></p><p>故解为ctf{c83901bbd399063a63c16a64b267bce7}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在线工具</title>
      <link href="2021/03/11/tools/"/>
      <url>2021/03/11/tools/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.runoob.com/try/runcode.php?filename=demo_intro&amp;type=php">php解码器</a></p><p><img src="/png/31.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/03/02/hello-world/"/>
      <url>2021/03/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
